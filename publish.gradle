apply plugin: 'com.novoda.bintray-release'

// small hack to override the artifact ID via group name, if it is clean the project name will be used as artifactId
def groupID, artifactID
if (project.group.contains(":")) {
    (groupID, artifactID) = project.group.split(":")
} else {
    groupID = project.group
    artifactID = project.name
}

logger.info("desc: " + project.description)
logger.info("group: " + groupID)
logger.info("version: " + project.version)
logger.info("artifactId: " + artifactID)

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier = 'javadoc'
    from "$buildDir/javadoc"
}

publish {
    userOrg = 'rewe-digital'
    groupId = groupID
    artifactId = artifactID
    repoName = rootProject.name
    publishVersion = project.version
    desc = project.description
    bintrayUser = project.properties['bintray.user']
    bintrayKey = project.properties['bintray.apikey']
    dryRun = true
    publications = ['maven']
}

publishing.publications {
    maven(MavenPublication) {
        groupId = groupID
        artifactId = artifactID
        from components.java
        version = project.version
        artifact sourcesJar {
            archiveClassifier = 'sources'
        }
        artifact javadocJar {
            archiveClassifier = 'javadoc'
        }
        
        pom {
            name = project.name
            description = project.description
            url = "https://rewe-digital-incubator.github.io/${rootProject.name}/${project.name}"
            licenses {
                license {
                    name = 'MIT License'
                    url = 'https://opensource.org/licenses/MIT'
                    distribution = 'repo'
                }
            }
            developers {
                def maintainers = [:]
                file("$rootDir/MAINTAINERS").text.eachLine { line ->
                    def (name, mail) = line.split('<')
                    maintainers[name.trim()] = mail.replace('>', '').trim()
                }
                maintainers.entrySet().forEach { dev ->
                    developer {
                        name = dev.key
                        email = dev.value
                    }
                }
            }
            scm {
                connection = "scm:git:git://github.com/rewe-digital-incubator/${rootProject.name}.git"
                developerConnection = "scm:git:git://github.com/rewe-digital-incubator/${rootProject.name}.git"
                url = "https://github.com/rewe-digital-incubator/${rootProject.name}"
            }
        }
    }
}